library("tdr-jenkinslib")

def versionBumpBranch = "version-bump-${BUILD_NUMBER}"

pipeline {
    agent {
        label "master"
    }
    parameters {
        choice(name: "STAGE", choices: ["intg", "staging", "prod"], description: "The stage you are running the database migration for")
    }
    stages {
      stage("Run migrations lambda") {
        agent {
          ecs {
            inheritFrom "aws"
            taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRJenkinsNodeLambdaRole${params.STAGE.capitalize()}"
          }
        }
        steps {
          script {
            def accountNumber = tdr.getAccountNumberFromStage(params.STAGE)
            sh "python3 /invoke_lambda.py ${accountNumber} ${params.STAGE} tdr-database-migrations-${params.STAGE}"
            tdr.postToDaTdrSlackChannel(colour: "good", message: "*Database migrations* :arrow_up: The migration lambda has been run in *${params.STAGE}*")
          }
        }
      }
    }
    post {
      success {
        script {
          if (params.STAGE == "intg"){
            // Wait for a few minutes so the lambda has finished running before
            // starting the end-to-end tests
            def endToEndTestDelaySeconds = 180

            tdr.runEndToEndTests(endToEndTestDelaySeconds, params.STAGE, BUILD_URL)
          }
        }
      }
    }
}
